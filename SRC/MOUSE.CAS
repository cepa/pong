#include "mouse.h"
#include <dos.h>
#include <stdio.h>

volatile unsigned int mouse_buttons = 0;
volatile unsigned int mouse_x = 0,mouse_y = 0,mouse_b = 0;
volatile unsigned int old_mouse_x = 0,old_mouse_y = 0;
volatile unsigned int mouse_visible = 0;
volatile unsigned mouse_cursor_s = 0;
volatile unsigned mouse_cursor_o = 0;
volatile unsigned int mouse_cursor_w = 0;
volatile unsigned int mouse_cursor_h = 0;
volatile unsigned int mouse_focus_x = 0,mouse_focus_y = 0;
volatile int first_mouse_view = 1;

BITMAP *mouse_cursor = NULL;
BITMAP *mouse_cursor_background = NULL;
BITMAP *mouse_screen = NULL;

unsigned char def_mouse_cursor[16][10] =
{
  {15,15, 0, 0, 0, 0, 0, 0, 0, 0},
  {15,16,15, 0, 0, 0, 0, 0, 0, 0},
  {15,16,16,15, 0, 0, 0, 0, 0, 0},
  {15,16,16,16,15, 0, 0, 0, 0, 0},
  {15,16,16,16,16,15, 0, 0, 0, 0},
  {15,16,16,16,16,16,15, 0, 0, 0},
  {15,16,16,16,16,16,16,15, 0, 0},
  {15,16,16,16,16,16,16,16,15, 0},
  {15,16,16,16,16,16,16,16,16,15},
  {15,16,16,16,16,16,15,15,15, 0},
  {15,16,16,15,16,16,15, 0, 0, 0},
  {15,16,15, 0,15,16,16,15, 0, 0},
  { 0,15, 0, 0,15,16,16,15, 0, 0},
  { 0, 0, 0, 0, 0,15,16,16,15, 0},
  { 0, 0, 0, 0, 0,15,16,16,15, 0},
  { 0, 0, 0, 0, 0, 0,15,15, 0, 0}
};

void __mouse_handler()
{
  asm mov mouse_y,dx
  asm shr cx,1
  asm mov mouse_x,cx
  asm mov ax,0x0005
  asm mov bx,0
  asm int 0x33
  asm mov mouse_b,ax

  if(mouse_visible)
  {

    if(!first_mouse_view)
    {
      blit(mouse_cursor_background,mouse_screen,0,0,old_mouse_x - mouse_focus_x,old_mouse_y - mouse_focus_y,mouse_cursor_w,mouse_cursor_h);
    }
    blit(mouse_screen,mouse_cursor_background,mouse_x - mouse_focus_x,mouse_y - mouse_focus_y,0,0,mouse_cursor_w,mouse_cursor_h);
    masked_blit(mouse_cursor,mouse_screen,0,0,mouse_x - mouse_focus_x,mouse_y - mouse_focus_y,mouse_cursor_w,mouse_cursor_h);

    first_mouse_view = 0;

    old_mouse_x = mouse_x;
    old_mouse_y = mouse_y;
  }

}

int install_mouse(BITMAP *mscr)
{
  unsigned s = FP_SEG(__mouse_handler);
  unsigned o = FP_OFF(__mouse_handler);

  if(!detect_mouse())
    return 0;

  if(!(mouse_cursor = create_bitmap(10,16)))
    return 0;

  if(!(mouse_cursor_background = create_bitmap(10,16)))
  {
    destroy_bitmap(mouse_cursor);
    return 0;
  }

  mouse_screen = mscr;

  set_default_mouse_cursor();

  show_mouse();

  asm mov ax,s
  asm mov es,ax
  asm mov dx,o
  asm mov ax,12
  asm mov cx,0x1F
  asm int 0x33

  return 1;
}

void remove_mouse()
{
  hide_mouse();
  //asm mov ax,0x0001
  //asm int 0x33
  mouse_screen = NULL;
  destroy_bitmap(mouse_cursor);
  destroy_bitmap(mouse_cursor_background);
}

void show_mouse()
{
  mouse_visible = 1;
  first_mouse_view = 1;
}

void hide_mouse()
{
  if(!first_mouse_view)
    blit(mouse_cursor_background,mouse_screen,0,0,old_mouse_x - mouse_focus_x,old_mouse_y - mouse_focus_y,mouse_cursor_w,mouse_cursor_h);
  mouse_visible = 0;
  first_mouse_view = 1;
}

int detect_mouse()
{
  int r;
  asm xor ax,ax
  asm int 0x33
  asm mov r,ax
  asm mov mouse_buttons,bx
  return r;
}

void move_mouse(unsigned int x,unsigned int y)
{
  asm mov ax,0x0004
  asm mov cx,x
  asm mov dx,y
  asm int 0x33
}

void mouse_area(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2)
{
  asm mov ax,0x0007
  asm mov cx,x1
  asm mov ax,x2
  asm mov bx,2
  asm mul bx
  asm mov dx,ax
  asm int 0x33
  asm mov ax,0x0008
  asm mov cx,y1
  asm mov dx,y2
  asm int 0x33
}

void set_default_mouse_cursor()
{
  int x,y;

  hide_mouse();

  destroy_bitmap(mouse_cursor);
  destroy_bitmap(mouse_cursor_background);

  if(!(mouse_cursor = create_bitmap(10,16)))
    return;

  if(!(mouse_cursor_background = create_bitmap(10,16)))
  {
    destroy_bitmap(mouse_cursor);
    return;
  }

  for(y = 0; y < 16; y++)
    for(x = 0; x < 10; x++)
      if(def_mouse_cursor[y][x] != 0)
	put_pixel(mouse_cursor,x,y,def_mouse_cursor[y][x]);

  mouse_cursor_s = FP_SEG(mouse_cursor->data);
  mouse_cursor_o = FP_OFF(mouse_cursor->data);
  mouse_cursor_w = mouse_cursor->w;
  mouse_cursor_h = mouse_cursor->h;
  mouse_focus_x = 0;
  mouse_focus_y = 0;

  show_mouse();
}

void set_mouse_focus(unsigned int x,unsigned int y)
{
  hide_mouse();
  mouse_focus_x = x;
  mouse_focus_y = y;
  show_mouse();
}

void set_mouse_cursor(BITMAP *cursor,unsigned int fx,unsigned int fy)
{
  hide_mouse();

  destroy_bitmap(mouse_cursor);
  destroy_bitmap(mouse_cursor_background);

  if(!(mouse_cursor = create_bitmap(cursor->w,cursor->h)))
    return;

  if(!(mouse_cursor_background = create_bitmap(cursor->w,cursor->h)))
  {
    destroy_bitmap(mouse_cursor);
    return;
  }

  blit(cursor,mouse_cursor,0,0,0,0,cursor->w,cursor->h);

  mouse_cursor_s = FP_SEG(mouse_cursor->data);
  mouse_cursor_o = FP_OFF(mouse_cursor->data);
  mouse_cursor_w = mouse_cursor->w;
  mouse_cursor_h = mouse_cursor->h;
  mouse_focus_x = fx;
  mouse_focus_y = fy;

  show_mouse();
}

